import pandas as pd


def stock_prediction_ema(start_prices: list, end_prices: list, alpha=0.5, plot=False):
    # plot = True –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    last_price = end_prices[-1]
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤ —Ü–µ–Ω –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Ç–æ—Ä–≥–æ–≤
    df = pd.DataFrame({'Start Prices': start_prices, 'End Prices': end_prices})
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–π –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    df['Price Change'] = df['End Prices'] - df['Start Prices']
    # –í—ã—á–∏—Å–ª—è–µ–º EMA
    df['EMA'] = df['End Prices'].ewm(alpha=alpha, adjust=False).mean()
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–π
    mean_change = df['Price Change'].mean()
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    prediction = df['EMA'].iloc[-1] + mean_change
    # if plot:
    #     # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∞–∫—Ü–∏–π –∏ EMA
    #     plt.figure(figsize=(10, 5))
    #     plt.plot(df['Start Prices'], label='Start Prices')
    #     plt.plot(df['End Prices'], label='End Prices')
    #     plt.plot(df['EMA'], label='EMA')
    #     plt.legend()
    #     plt.title('Stock Prices with EMA')
    #     plt.show()
    if round(prediction, 1) > round(last_price, 1):
        return f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {prediction:.2f}.\n" \
               f"–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ –∑–∞–≤—Ç—Ä–∞.üìà\n"
    elif round(prediction, 1) < round(last_price, 1):
        return f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {prediction:.2f}.\n" \
               f"–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ –∑–∞–≤—Ç—Ä–∞.üìâ\n"
    else:
        return f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {prediction:.2f}.\n" \
               f"–ó–∞–≤—Ç—Ä–∞ —Ü–µ–Ω–∞ –∞–∫—Ü–∏–π, –æ–∂–∏–¥–∞–µ–º–æ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ.üìä\n"

# –≤—ã–≤–æ–¥–∏—Ç—å —Ü–µ–Ω—É –∏ –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑


# def stock_price_prediction_ma(stock_prices: list, period: int):
#     # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
#     ma = np.mean(stock_prices[-period:])
#
#     # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É
#     last_price = stock_prices[-1]
#
#     # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
#     next_day_forecast = ma
#
#     # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É
#     if next_day_forecast > last_price:
#         return f"The stock price is expected to increase tomorrow.\n"
#     elif next_day_forecast < last_price:
#         return f"The stock price is expected to decrease tomorrow.\n"
#     else:
#         return f"The stock price is expected to stay the same tomorrow.\n"
#     # —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ 7 –∏ 14 –¥–Ω—è–º –∏ —Ç–∞–∫ –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑,–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫???
